runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runAPp()
runApp()
runAPp()
runApp()
runApp()
runApp()
runAPp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runAPp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runAPp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
id1 = 1
id2 = 1
id2 = 2
id3 = 0
id3 = 2
id2 = 1
id4 = 0
x <- sum(id1, id2, id3, id4)
if x < 4 {
riskRSV <- '16.8%'
} else
if x = 4 {
riskRSV <- '23.4%'
} else
riskRSV <- '32.0%'
)
if(x < 4){
risk.RSV <- '16.8%'
} else {
if(x = 4){
risk.RSV <- '23.4%'
} else {
risk.RSV <- '32.0%'
}
}
risk.RSV
x = id1 + id2 + id3 + id4
ifelse(x < 4){
risk.RSV <- '16.8%'
}
ifelse(x = 4){
risk.RSV <- '23.4%'
}
else {
risk.RSV <- '32.0%'
}
}
risk.RSV
x = id1 + id2 + id3 + id4
x <- (0, 1, 2, 3,4, 5)
y <- (16.8, 16.8, 16.8, 16.8, 23.4, 32.0)
if (total < 0)                      # there's a problem
return (-1)                     # return some value
next.thing <- continue.processing()
remarks <- "Everything worked"
return (list (Out = next.thing, Comment = remarks))
if (x < 4)
return (-1)
x = id1 + id2 + id3 + id4
if (x < 4)
risk.RSV <- 'good'
risk.RSV
x = id1 + id2 + id3 + id4
if (x < 4)
risk.RSV <- 'good'
if (x = 4)
risk.RSV = 'bad'
if (x < 4)
risk.RSV <- 'good'
if (x > 4)
risk.RSV = 'bad'
risk.RSV
id1 = 1
id2 = 1
id3 = 2
id4 = 0
x = id1 + id2 + id3 + id4
if (x < 4)
risk.RSV <- 'good'
if (x > 4)
risk.RSV <- 'bad'
else
risk.RSV <- 'OK'
id4 = 1
x = id1 + id2 + id3 + id4
if (x < 4)
risk.RSV <- 'good'
if (x > 4)
risk.RSV <- 'bad'
else
risk.RSV <- 'OK'
risk.RSV
x = id1 + id2 + id3 + id4
function(x) {
if (x < 4)
risk.RSV <- 'good'
} else {
if (x > 4)
risk.RSV <- 'bad'
} else
risk.RSV <- 'OK'
x = id1 + id2 + id3 + id4
if(x < '4'){
risk.RSV <- '16.8%'
} else {
if(x=='4'){
risk.RSV <- '23.4%'
} else {
risk.RSV <- '32.0%'
}
}
risk.RSV
id4 = 0
risk.RSV
x = id1 + id2 + id3 + id4
risk.RSV
x = id1 + id2 + id3 + id4
if(x < '4'){
risk.RSV <- '16.8%'
} else {
if(x=='4'){
risk.RSV <- '23.4%'
} else {
risk.RSV <- '32.0%'
}
}
runApp()
runApp()
runApp()
runApp()
runApp()
id1 = 1
id2 = 0
id3 = 2
id4 = 0
myrisk <- id1 + id2 + id3 + id4
if(myrisk < '4'){
risk.RSV <- '16.8%'
} else {
if(myrisk=='4'){
risk.RSV <- '23.4%'
} else {
risk.RSV <- '32.0%'
}
}
myrisk <- function(id1 + id2 + id3 + id4)
if(myrisk < '4'){
risk.RSV <- '16.8%'
} else {
if(myrisk=='4'){
risk.RSV <- '23.4%'
} else {
risk.RSV <- '32.0%'
}
}
myrisk <- function('id1' + 'id2' + 'id3' + 'id4')
if(myrisk < '4'){
risk.RSV <- '16.8%'
} else {
if(myrisk=='4'){
risk.RSV <- '23.4%'
} else {
risk.RSV <- '32.0%'
}
}
runApp()
myrisk <- function(x) id1 + id2 + id3 + id4
if(myrisk < '4'){
risk.RSV <- '16.8%'
} else {
if(myrisk=='4'){
risk.RSV <- '23.4%'
} else {
risk.RSV <- '32.0%'
}
}
myrisk <- id1 + id2 + id3 + id4
if(myrisk < '4'){
risk.RSV <- '16.8%'
} else {
if(myrisk=='4'){
risk.RSV <- '23.4%'
} else {
risk.RSV <- '32.0%'
}
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runAPp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?asnumberic
?asnum
?asnumeric
runApp()
runAPp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
checkGroup <- 1 1 0 1
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
weight <- TRUE
as.numeric(weight)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
weight = TRUE
month = FALSE
weightrisk.RSV <- function(weight) as.numeric(weight)
monthrisk.RSV <- function(month) as.numeric(month) * 5
monthrisk.RSV
bar <- c(weightrisk.RSV, monthrisk.RSV)
sum(bar)
bar <- c(as.numeric(weightrisk.RSV), as.numeric(monthrisk.RSV))
bar <- c(is.numeric(weightrisk.RSV), is.numeric(monthrisk.RSV))
sum(bar)
bar <- (is.numeric(weight), is.numeric(month) * 2)
bar <- c(is.numeric(weight), is.numeric(month) * 2)
bar
weight = TRUE
bar
month = TRUE
bar
runApp()
shinyapps::setAccountInfo(name='mrspeicher', token='EBDE88580F90AA31265C0CCBB866F3A3', secret='VRmdYrYxkjU3KXmqXqx/D+lDC3bWH3MyiTU8CzUV')
library(shiny)
shinyapps::setAccountInfo(name='mrspeicher', token='EBDE88580F90AA31265C0CCBB866F3A3', secret='VRmdYrYxkjU3KXmqXqx/D+lDC3bWH3MyiTU8CzUV')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='mrspeicher', token='EBDE88580F90AA31265C0CCBB866F3A3', secret='VRmdYrYxkjU3KXmqXqx/D+lDC3bWH3MyiTU8CzUV')
library(shinyapps)
shinyapps::deployApp('.../R/DataProducts')
shinyapps::deployApp(DataProdicts)
shinyapps::deployApp()
library(devtools)
devtools::install_github('slidify', 'ramnathv')
devtools::install_github('ramnathv/slidify')
library(slidify)
author('RSV')
devtools::install_github('ramnathv/slidifyLibraries')
slidify(index.Rmd)
setwd("~/Coursera/R/DataProducts/RSV")
slidify(index.Rmd)
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
author(RSV)
author('RSV')
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
Slide With Input and Output Code
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
## Get the data from the URLs in the assignment and set the NA variables to NA
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""))
## Particion the training data set for 60% training 40% testing
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
myTraining <- training[inTrain, ]; myTesting <- training[-inTrain, ]
dim(myTraining); dim(myTesting)
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
install.packages(rpart.plot)
?rpart.plot
??rpart.plot
install.packages('rpart.plot')
library(rpart.plot)
install.packages('rattle')
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
myTraining <- training[inTrain, ]; myTesting <- training[-inTrain, ]
dim(myTraining); dim(myTesting)
myDataNZV <- nearZeroVar(myTraining, saveMetrics=TRUE)
myNZVvars <- names(myTraining) %in% c("new_window", "kurtosis_roll_belt", "kurtosis_picth_belt",
"kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt", "avg_roll_arm", "stddev_roll_arm",
"var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm",
"stddev_yaw_arm", "var_yaw_arm", "kurtosis_roll_arm", "kurtosis_picth_arm",
"kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm",
"max_roll_arm", "min_roll_arm", "min_pitch_arm", "amplitude_roll_arm", "amplitude_pitch_arm",
"kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell",
"skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell",
"amplitude_yaw_dumbbell", "kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_roll_forearm",
"max_yaw_forearm", "min_roll_forearm", "min_yaw_forearm", "amplitude_roll_forearm",
"amplitude_yaw_forearm", "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm",
"avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm",
"stddev_yaw_forearm", "var_yaw_forearm")
myTraining <- myTraining[!myNZVvars]
## To check the new number of observations
dim(myTraining)
myTraining <- myTraining[c(-1)]
## Get rid of the variables with too many NAs in the set
trainingV3 <- myTraining #creating another subset to iterate in loop
for(i in 1:length(myTraining)) { #for every column in the training dataset
if( sum( is.na( myTraining[, i] ) ) /nrow(myTraining) >= .6 ) { #if n?? NAs > 60% of total observations
for(j in 1:length(trainingV3)) {
if( length( grep(names(myTraining[i]), names(trainingV3)[j]) ) ==1)  { #if the columns are the same:
trainingV3 <- trainingV3[ , -j] #Remove that column
}
}
}
}
## To check the new N again
dim(trainingV3)
## You should have
myTraining <- trainingV3
rm(trainingV3)
clean1 <- colnames(myTraining)
clean2 <- colnames(myTraining[, -58]) # already with classe column removed
myTesting <- myTesting[clean1]
testing <- testing[clean2]
dim(myTesting)
dim(testing)
for (i in 1:length(testing) ) {
for(j in 1:length(myTraining)) {
if( length( grep(names(myTraining[i]), names(testing)[j]) ) ==1)  {
class(testing[j]) <- class(myTraining[i])
}
}
}
#And to make sure Coertion really worked, simple smart ass technique:
testing <- rbind(myTraining[2, -58] , testing) #note row 2 does not mean anything, this will be removed right.. now:
testing <- testing[-1,]
modFitA1 <- rpart(classe ~ ., data=myTraining, method="class")
predictionsA1 <- predict(modFitA1, myTesting, type = "class")
fancyRpartPlot(modFitA1)
fancyRpartPlot(modFitA1)
predictionsA1 <- predict(modFitA1, myTesting, type = "class")
confusionMatrix(predictionsA1, myTesting$classe)
confusionMatrix(predictionsA1, myTesting$classe)
load.packages('e1071')
install.packages('e1071')
library(e1071)
confusionMatrix(predictionsA1, myTesting$classe)
modFitB1 <- randomForest(classe ~. , data=myTraining)
install.packages('randomForest')
library(randomForest)
modFitB1 <- randomForest(classe ~. , data=myTraining)
predictionsB1 <- predict(modFitB1, myTesting, type = "class")
confusionMatrix(predictionsB1, myTesting$classe)
##
predictionsB2 <- predict(modFitB1, testing, type = "class")
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(predictionsB2)
setwd("~/Coursera/R/MachineLearning")
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(predictionsB2)
confusionMatrix(predictionsB2, testing$classe)
